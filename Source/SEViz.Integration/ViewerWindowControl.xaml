<!--
 *
 * SEViz - Symbolic Execution VIsualiZation
 *
 * SEViz is a tool, which can support the test generation process by
 * visualizing the symbolic execution in a directed graph.
 *
 * Authors: Dávid Honfi <honfi@mit.bme.hu>, Zoltán Micskei
 * <micskeiz@mit.bme.hu>, András Vörös <vori@mit.bme.hu>
 * 
 * Copyright 2015 Budapest University of Technology and Economics (BME)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 *    
-->
<UserControl x:Class="SEViz.Integration.ViewerWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:zoom="clr-namespace:GraphSharp.Controls.Zoom;assembly=GraphSharp.Controls"
             xmlns:controls="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls" 
             xmlns:model="clr-namespace:SEViz.Common.Model;assembly=SEViz.Common"
             xmlns:viewModel="clr-namespace:SEViz.Integration.ViewModel"
             xmlns:res="clr-namespace:SEViz.Integration.Resources"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             Background="{DynamicResource VsBrush.Window}"
             Foreground="{DynamicResource VsBrush.WindowText}"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             Name="MyToolWindow">
    
    <UserControl.Resources>
        
        <ResourceDictionary
	        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	        xmlns:controls="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls" 
	        xmlns:converters="clr-namespace:GraphSharp.Converters;assembly=GraphSharp.Controls"
	        xmlns:attachedBehaviours="clr-namespace:GraphSharp.AttachedBehaviours;assembly=GraphSharp.Controls"
	        xmlns:model="clr-namespace:SEViz.Common.Model;assembly=SEViz.Common"
            xmlns:helpers="clr-namespace:SEViz.Integration.Helpers.Converters">

            <!-- Converters -->
            <converters:EdgeRouteToPathConverter x:Key="RouteToPathConverter" />
            <helpers:NodeBorderToBorderPaddingConverter x:Key="NodeBorderToBorderPaddingConverter" />
            <helpers:NodeBorderToBorderThicknessConverter x:Key="NodeBorderToBorderThicknessConverter" />
            <helpers:EdgeColorToForegroundColorConverter x:Key="EdgeColorToForegroundColorConverter" />

            <SolidColorBrush x:Key="HighlightedVertexBorderBrush" Color="Transparent" />
            <SolidColorBrush x:Key="HighlightedVertexBackgroundBrush" Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" />
            <SolidColorBrush x:Key="HighlightedVertexForegroundBrush" Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}" />

            <DataTemplate DataType="{x:Type model:SENode}">
                <TextBlock Text="{Binding Path=Id, Mode=OneWay, FallbackValue=VertexId}" Foreground="Black" TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="ClearType" RenderOptions.ClearTypeHint="Enabled" />
            </DataTemplate>

            <!-- VERTEX CONTROL -->
            <Style TargetType="{x:Type controls:VertexControl}">
                <EventSetter Event="MouseRightButtonDown"  Handler="Node_OnRightClick" />
                <EventSetter Event="MouseLeftButtonDown"  Handler="Node_OnClick" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:VertexControl}">
                            <Border Name="outerBorder"
                                                    Background="{TemplateBinding Background}" 
							                    BorderBrush="{TemplateBinding BorderBrush}"
                                                CornerRadius="{Binding Path=ActualHeight, ElementName=nodeBorder}" 
                                                BorderThickness="{Binding Path=(model:SENode.Border),Converter={StaticResource NodeBorderToBorderThicknessConverter}}"
                                                Padding="{Binding Path=(model:SENode.Border),Converter={StaticResource NodeBorderToBorderPaddingConverter}}">
                                <!-- The last two transforms the double border -->
                                <Border.ToolTip>
                                    <StackPanel>
                                        <TextBlock FontWeight="Bold" FontSize="14" Margin="0,0,0,5" Text="{Binding Path=(model:SENode.IncrementalPathCondition)}"></TextBlock>
                                        <TextBlock Text="{Binding Path=(model:SENode.MethodName)}" />
                                        <TextBlock Text="{Binding Path=(model:SENode.SourceCodeMappingString)}"></TextBlock>
                                        <Border BorderBrush="Silver" BorderThickness="0,1,0,0" Margin="0,8" />
                                        <WrapPanel>

                                            <TextBlock FontStyle="Italic">See Properties for details.</TextBlock>
                                        </WrapPanel>
                                    </StackPanel>
                                </Border.ToolTip>
                                <Border Name="nodeBorder"
                                                        Background="{TemplateBinding Background}" 
                                                        BorderBrush="{TemplateBinding BorderBrush}" 
							                            BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="{Binding Path=ActualHeight, ElementName=nodeBorder}" 
                                                        Padding="{TemplateBinding Padding}"
                                                        >
                                    <ContentPresenter Content="{TemplateBinding Vertex}"/>
                                </Border>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="controls:GraphElementBehaviour.HighlightTrigger" Value="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="attachedBehaviours:DragBehaviour.IsDragEnabled" Value="False"/>
                <Setter Property="attachedBehaviours:DragBehaviour.X" Value="{Binding Path=(controls:GraphCanvas.X), Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="attachedBehaviours:DragBehaviour.Y" Value="{Binding Path=(controls:GraphCanvas.Y), Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderThickness" Value="1,1,1,1"/>
                <!-- Be careful: NodeBorderConverters should be rewritten too. -->
                <Setter Property="Padding" Value="10,5,10,5"/>
                <Setter Property="BorderBrush" Value="#FF393939"/>
                <Style.Triggers>
                    <!-- IF NODE SHAPE IS RECTANGLE -->
                    <DataTrigger Binding="{Binding Path=(model:SENode.Shape)}" Value="1">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type controls:VertexControl}">
                                    <Border Name="outerBorder"
                                                    Background="{TemplateBinding Background}"
							                    BorderBrush="{TemplateBinding BorderBrush}"
                                                CornerRadius="0"
                                                BorderThickness="{Binding Path=(model:SENode.Border),Converter={StaticResource NodeBorderToBorderThicknessConverter}}"
                                                Padding="{Binding Path=(model:SENode.Border),Converter={StaticResource NodeBorderToBorderPaddingConverter}}">
                                        <!-- The last two transforms the double border -->
                                        <Border.ToolTip>
                                            <StackPanel>
                                                <TextBlock FontWeight="Bold" FontSize="14" Margin="0,0,0,5" Text="{Binding Path=(model:SENode.IncrementalPathCondition)}"></TextBlock>
                                                <TextBlock Text="{Binding Path=(model:SENode.MethodName)}" />
                                                <TextBlock Text="{Binding Path=(model:SENode.SourceCodeMappingString)}"></TextBlock>
                                                <Border BorderBrush="Silver" BorderThickness="0,1,0,0" Margin="0,8" />
                                                <WrapPanel>

                                                    <TextBlock FontStyle="Italic">See Properties for details.</TextBlock>
                                                </WrapPanel>
                                            </StackPanel>
                                        </Border.ToolTip>
                                        <Border Name="nodeBorder"
                                                        Background="{TemplateBinding Background}" 
                                                        BorderBrush="{TemplateBinding BorderBrush}" 
							                            BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="0" 
                                                        Padding="{TemplateBinding Padding}"
                                                        >
                                            <ContentPresenter Content="{TemplateBinding Vertex}"/>
                                        </Border>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>

                    <Trigger Property="controls:GraphElementBehaviour.IsHighlighted" Value="True">
                        <!--<Setter Property="BorderBrush" Value="{StaticResource HighlightedVertexBorderBrush}"/>
                                -->
                        <Setter Property="Effect">
                            <Setter.Value>
                                <DropShadowEffect ShadowDepth="0" Color="Blue" Opacity="1" BlurRadius="10" />
                            </Setter.Value>
                        </Setter>
                        <!--<Setter Property="Background" Value="{StaticResource HighlightedVertexBackgroundBrush}"/>-->
                        <!--<Setter Property="Foreground" Value="{StaticResource HighlightedVertexForegroundBrush}"/>-->
                    </Trigger>

                </Style.Triggers>

            </Style>

            <Style TargetType="{x:Type controls:EdgeControl}">

                <Setter Property="Foreground" Value="{Binding Path=(model:SEEdge.Color),Converter={StaticResource EdgeColorToForegroundColorConverter}}" />

            </Style>
        </ResourceDictionary>

    </UserControl.Resources>
    <Grid>
    <zoom:ZoomControl Grid.Column="1" Grid.ColumnSpan="2">
            <viewModel:CFGGraphLayout x:Name="GraphControl" />
    </zoom:ZoomControl>
    </Grid>
</UserControl>
